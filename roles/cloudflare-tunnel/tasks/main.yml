# - name: Install cloudflared
#   apt: 
#     deb: https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
#   when: ansible_facts['os_family'] == "Debian"

- name: Install cloudflared
  apt: 
    deb: "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-{{ ansible_architecture }}.deb"
  when: ansible_facts['os_family'] == "Debian"

- name: Install cloudflared
  become: true
  yum: 
    name: "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-{{ ansible_architecture }}.rpm"
    state: present
    disable_gpg_check: true
  when: ansible_facts['os_family'] == "RedHat"

- name: Create torrent config folder
  become: false
  file:
    path: $HOME/.cloudflared
    state: directory

- name: Copy cloudflare login credentials pem file
  become: false
  copy:
    content: '{{ CLOUDFLARE_PEM }}'
    dest: $HOME/.cloudflared/cert.pem

- name: Create tunnel
  become: false
  command: cloudflared tunnel create -o json {{ TUNNEL_NAME }}
  ignore_errors: true

- name: Get tunnel
  become: false
  command: cloudflared tunnel list --name {{ TUNNEL_NAME }} -o json
  register: tunnel_result

- name: Get tunnel facts
  become: false
  set_fact: 
    TUNNEL_ID: "{{ (tunnel_result.stdout | from_json)[0].id }}"
    TUNNEL_CREDENTIALS_FILE: "./{{ (tunnel_result.stdout | from_json)[0].id }}.json"

- name: Add configuration
  become: false
  template:
    src: config.yml.j2  
    dest: $HOME/.cloudflared/config.yml

- name: Kill previous tunnels
  become: false
  command: sh -c "tmux has-session -t {{ TUNNEL_NAME }} && tmux kill-session -t {{ TUNNEL_NAME }}"
  ignore_errors: true

- name: Start tunnel 
  become: false
  command: sh -c "tmux new-session -d -s {{ TUNNEL_NAME }} cloudflared tunnel run"

- name: Reminder
  ansible.builtin.debug:
    msg: Make sure DNS CNAME records are added to the tunnels in the Cloudflare DNS dashboard